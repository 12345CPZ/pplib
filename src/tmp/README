zlib-1.2.5

we don't set _LARGEFILE64_SOURCE flag even for 64bit builds:
- this flag doesn't guarantee using 64-bit offsets, there are more flags involved
- every extra flag is cumbersome, as we have to ensure that the flag is set/unset
  during lib compilation AND when #include-ing zlib from anywhere (lunafilter, pnglib)
- this flag implies including unistd.h, which seems not needed for mingw and completelly
  missing in msvc

flags and guts:

- when NO_VIZ is defined ZLIB_INTERNAL used before functions definition becomes empty (visible), otherwise with
  'hidden' attrbiute
- contrib\masmx64 contains 2 files to be compiled with ml/ml64 assembler and 1 file to be compiled with cl
  one of functions (re)defined in assember is infflate_fast (original code in inffast.c); the choice is made
  on the base of ASMINF flag; when defined, assembler version is used
- on msvc, if not using assembler code, linker couldn't find inflate_fast(), because in win32\Makefile.msc,
  the original inffast.c is not involved (one of those moments I'm happy to have own makefiles...)
  obviously linker complains when linking zlib to something else, lib itself dos not complain

- assembler parts for gcc are different. under gcc x86 i used asm686\match.S, under x64 i use gcc_gvmat64\gvmat64.S
  both implements the same function in assembler, but different than msvc, hance flags differs; no DASMINF on gcc
  as there is noassembler inffast implementation for x64 (at least I don't see one)
- unless NO_UNDERINE is defined. assembler chunks add _ to function name, causing linker fail
- ... so we make all that asm part conditional, in both gcc and msvc